;; Widget variables
(defpoll battery :interval "5s" "scripts/battery")
(deflisten music-status :initial "" "scripts/music-status")
(defpoll ram-usage :interval "1s" "scripts/ram-usage")
(defpoll time :interval "1s" "date '+%a %b %d, %Y  %H:%M'")
(deflisten volume-status "scripts/volume-status")
(deflisten window :initial "" "scripts/window-name")
(deflisten workspaces :initial "" "scripts/workspaces")
(deflisten notifications :inital "" "scripts/notifications")

;; Toggles
(defvar cpu-expanded false)

(defwidget workspace-widget [spaces]
  (box
   :space-evenly false
   :class "workspaces-wrapper"
   (for workspace in spaces
        (button
         :onclick "sway workspace ${workspace.name}"
         (box
          :space-evenly false
          :class "workspace-wrapper ${workspace.visible ? 'visible' : ''} ${workspace.focused ? 'focused' : ''}"
          (label :text {workspace.name})
          (box
           :class "workspace__icon-wrapper"
           (for client in {workspace.clients}
                (image
                 :image-width 24
                 :path {client.icon}
                 :visible {client.icon != ""}))))))))

(defwidget metric [label value onchange]
  (box :orientation "v"
       :class "metric"
       :space-evenly false
       :halign "center"
       (label
        :limit-width 40
        :text label)
       (scale :min 0
              :max 101
              :active {onchange != ""}
              :value {value ?: 0}
              :onchange onchange)))

(defwidget icon-pill [icon name icon-class on-icon-click]
  (box :class "${name}__wrapper icon-pill"
       :orientation "h"
       :space-evenly false
       :halign "center"
       (button
        :onclick on-icon-click
        (label
         :class "icon-pill__icon ${name}__icon ${icon-class}"
         :text icon))
       (children)))

(defwidget system-bar [value]
  (scale
   :min 0
   :max 101
   :class {value < 25 ? "low" :
                 value < 50 ? "medium" :
                 value < 90 ? "high" : "max"}
   :value {value}
   :flipped true
   :orientation "v"))

(defwidget music []
  (box
   :visible {music-status != ""}
   (icon-pill
    :name "music"
    :icon {music-status.status == "playing" ? " " : " "}
    :icon-class {music-status.status}
    :on-icon-click "playerctl play-pause"
    (metric
     :label "${music-status.artist} - ${music-status.title}"
     :value {round(music-status.position / music-status.length * 100, 0)}
     :onchange ""))))

(defwidget volume []
  (box
   :orientation "h"
   :space-evenly false
   :class "volume-wrapper"
   :visible {volume-status != ""}
   (icon-pill
    :name "volume-sink"
    :icon "${volume-status.sink.muted ? '󰝟' : '󰕾'}"
    :icon-class "volume-sink ${volume-status.sink.muted ? 'muted' :''}"
    :on-icon-click "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"
    (scale :min 0
           :max 101
           :value {volume-status.sink.volume}
           :onchange "./scripts/set-volume @DEFAULT_AUDIO_SINK@ {}"))
   (icon-pill
    :name "volume-source"
    :icon "${volume-status.source.muted ? '󰍭' : '󰍬'}"
    :icon-class "volume-source ${volume-status.source.muted ? 'muted' :''}"
    :on-icon-click "wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle"
    (scale :min 0
           :max 101
           :value {volume-status.source.volume}
           :onchange "./scripts/set-volume @DEFAULT_AUDIO_SOURCE@ {}"))))

(defwidget cpu []
  (eventbox
   :onclick "${EWW_CMD} update cpu-expanded=${!cpu-expanded}"
   (icon-pill
    :name "cpu"
    :icon ""
    :icon-class "cpu"
    :on-icon-click ""
    (box
     :orientation "h"
     :space-evenly false
     :class "cpu-wrapper"
     (revealer
      :transition "slideleft"
      :reveal {! cpu-expanded}
      (system-bar
       :value {EWW_CPU.avg}))
     (revealer
      :transition "slideright"
      :reveal cpu-expanded
      :duration "250ms"
      (box
       :orientation "h"
       :space-evenly false
       (for cpu in {EWW_CPU.cores}
            (system-bar
             :value {cpu.usage}))))))))

(defwidget ram []
  (icon-pill
   :name "ram"
   :icon ""
   :icon-class "ram"
    :on-icon-click ""
   (box
    :orientation "h"
    :space-evenly false
    :class "ram-wrapper"
    (for ram in ram-usage
         (system-bar
          :value ram)))))

(defwidget clock []
  (icon-pill
   :name "clock"
   :icon ""
   :icon-class "clock"
   :on-icon-click ""
   (label
    :text time)))

(defwidget swaync []
           (box :class "notifications-wrapper"
                (button
                 :visible "which swaync-client"
                 :onclick "sleep 0.1; swaync-client -t -sw"
                 :onrightclick "sleep 0.1; swaync-client -d -sw"
                 (box
                  (label :markup {notifications})))))

(defwidget left [index]
  (workspace-widget
   :spaces {workspaces[index]}))

(defwidget center []
  (box
   :space-evenly false
   :halign "fill"
   :class "window-wrapper"
   :tooltip {window.name}
   (image
    :image-width 24
    :path {window.icon ?: "./assets/sway.png"})
   (label :text {window.name}
          :limit-width 50)))

(defwidget right []
  (box
   :space-evenly false
   :halign "end"
   (music)
   (cpu)
   (ram)
   (volume)
   (clock)
   (systray :pack-direction "ltr"
            :icon-size 16)
     (swaync)))

;; TODO Make this much less crap...

(defwindow bar-eDP-1
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :anchor "top center")
  :stacking "fg"
  :exclusive true
  (centerbox
   :class "bar"
   :orientation "h"
   (left
    :index 0)
   (center)
   (right)))

(defwindow bar-DP-2
  :monitor 1
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :anchor "top center")
  :stacking "fg"
  :exclusive true
  (centerbox
   :class "bar"
   :orientation "h"
   (left
    :index 1)
   (center)
   (right)))

(defwindow bar-DP-3
  :monitor 2
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :anchor "top center")
  :stacking "fg"
  :exclusive true
  (centerbox
   :class "bar"
   :orientation "h"
   (left
    :index 2)
   (center)
   (right)))
